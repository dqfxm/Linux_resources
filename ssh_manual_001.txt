SSH配置方法
原链接：https://www.jb51.net/article/156422.htm

传统的网络服务程序，如：ftp、POP和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的，就是很容易受到“中间人”（man-in-the-middle）这种方式的攻击。所谓“中间人”的攻击方式，就是“中间人”冒充真正的服务器接收你传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。

从前，一个名为Tatu Yl?nen的芬兰程序员开发了一种网络协议和服务软件，称为SSH（Secure SHell的缩写）。通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，虽然许多人把Secure Shell仅当作Telnet的替代物，但你可以使用它来保护你的网络连接的安全。你可以通过本地或远程系统上的Secure Shell转发其他网络通信，如POP、X、PPP和FTP。你还可以转发其他类型的网络通信，包括CVS和任意其他的TCP通信。另外，你可以使用带 TCP包装的Secure Shell，以加强连接的安全性。除此之外，Secure Shell还有一些其他的方便的功能，可用于诸如Oracle之类的应用，也可以将它用于远程备份和像SecurID卡一样的附加认证。

SSH的工作机制

SSH分为两部分：客户端部分和服务端部分。

服务端是一个守护进程(demon)，他在后台运行并响应来自客户端的连接请求。服务端一般是sshd进程，提供了对远程连接的处理，一般包括公共密钥认证、密钥交换、对称密钥加密和非安全连接。

客户端包含ssh程序以及像scp（远程拷贝）、slogin（远程登陆）、sftp（安全文件传输）等其他的应用程序。

他们的工作机制大致是本地的客户端发送一个连接请求到远程的服务端，服务端检查申请的包和IP地址再发送密钥给SSH的客户端，本地再将密钥发回给服务端，自此连接建立。刚才所讲的只是SSH连接的大致过程，SSH 1.x和SSH 2.x在连接协议上还有着一些差异。

SSH被设计成为工作于自己的基础之上而不利用超级服务器(inetd)，虽然可以通过inetd上的tcpd来运行SSH进程，但是这完全没有必要。启动SSH服务器后，sshd运行起来并在默认的22端口进行监听（你可以用 # ps -waux | grep sshd 来查看sshd是否已经被正确的运行了）如果不是通过inetd启动的SSH，那么SSH就将一直等待连接请求。当请求到来的时候SSH守护进程会产生一个子进程，该子进程进行这次的连接处理。

但是因为受版权和加密算法的限制，现在很多人都转而使用OpenSSH。OpenSSH是SSH的替代软件，而且是免费的，

SSH是由客户端和服务端的软件组成的，有两个不兼容的版本分别是：1.x和2.x。用SSH 2.x的客户程序是不能连接到SSH 1.x的服务程序上去的。OpenSSH 2.x同时支持SSH 1.x和2.x。

SSH分客户端openssh-client和openssh-server

如果你只是想登陆别的机器的SSH只需要安装openssh-client（ubuntu有默认安装，如果没有则sudoapt-get install openssh-client），如果要使本机开放SSH服务就需要安装openssh-server。
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
一、安装客户端
Ubuntu缺省已经安装了ssh client。

1> sudo apt-get install ssh 或者 sudo apt-get installopenssh-client
2> ssh-keygen 
(按回车设置默认值)

按缺省生成id_rsa和id_rsa.pub文件，分别是私钥和公钥。

说明：如果sudo apt-get insall ssh出错，无法安装可使用sudo apt-get install openssh-client进行安装。

假定服务器ip为192.168.1.1，ssh服务的端口号为22，服务器上有个用户为root；

用ssh登录服务器的命令为：



1> ssh –p 22 root@192.168.1.1
2> 输入root用户的密码
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

二、安装服务端
Ubuntu缺省没有安装SSH Server，使用以下命令安装：

1> sudo apt-get install openssh-server
然后确认sshserver是否启动了：（或用“netstat -tlp”命令）

1> ps -e|grep ssh
如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了。 
如果没有则可以这样启动：

1> sudo/etc/init.d/ssh start
事实上如果没什么特别需求，到这里 OpenSSH Server 就算安装好了。但是进一步设置一下，可以让 OpenSSH 登录时间更短，并且更加安全。这一切都是通过修改 openssh 的配置文件 sshd_config 实现的。

三、SSH配置
ssh-server配置文件位于/etc/ssh/sshd_config，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，如222。然后重启SSH服务：

1> sudo /etc/init.d/sshresart
通过修改配置文件/etc/ssh/sshd_config，可以改ssh登录端口和禁止root登录。改端口可以防止被端口扫描。

1> sudo cp/etc/ssh/sshd_config /etc/ssh/sshd_config.original
2> sudochmod a-w /etc/ssh/sshd_config.original
编辑配置文件：

1> gedit /etc/ssh/sshd_config
找到#Port 22，去掉注释，修改成一个五位的端口：Port 22333

找到#PermitRootLogin yes，去掉注释，修改为：PermitRootLogin no
配置完成后重起：

1> sudo/etc/init.d/ssh restart
四、SSH服务命令
停止服务：sudo /etc/init.d/ssh stop
启动服务：sudo /etc/init.d/ssh start
重启服务：sudo /etc/init.d/sshresart
断开连接：exit

登录：sshroot@192.168.0.100 
root为192.168.0.100机器上的用户，需要输入密码。

五、SSH登录命令
常用格式：ssh [-llogin_name] [-p port] [user@]hostname
更详细的可以用ssh -h查看。
举例
不指定用户：ssh 192.168.0.1
指定用户：
1> ssh -l root 192.168.0.1
2> ssh root@192.168.0.1 
如果修改过ssh登录端口的可以：
1> ssh -p 22333 192.168.0.111
2> ssh -l root -p 22333 216.230.230.105
3> ssh -p 22333 root@216.230.230.105
六、提高登录速度
在远程登录的时候可能会发现，在输入完用户名后需要等很长一段时间才会提示输入密码。其实这是由于 sshd 需要反查客户端的 dns 信息导致的。可以通过禁用这个特性来大幅提高登录的速度。首先，打开 sshd_config 文件：
1> sudo nano /etc/ssh/sshd_config
找到 GSSAPI options 这一节，将下面两行注释掉：
#GSSAPIAuthentication yes #GSSAPIDelegateCredentials no然后重新启动 ssh 服务即可：
1> sudo /etc/init.d/ssh restart
再登录试试，应该非常快了吧

七、利用 PuTTy 通过证书认证登录服务器
SSH 服务中，所有的内容都是加密传输的，安全性基本有保证。但是如果能使用证书认证的话，安全性将会更上一层楼，而且经过一定的设置，还能实现证书认证自动登录的效果。

首先修改 sshd_config 文件，开启证书认证选项：

RSAAuthentication yes PubkeyAuthentication yesAuthorizedKeysFile %h/.ssh/authorized_keys修改完成后重新启动 ssh 服务。

下一步我们需要为 SSH 用户建立私钥和公钥。首先要登录到需要建立密钥的账户下，这里注意退出 root 用户，需要的话用 su 命令切换到其它用户下。然后运行：

1
ssh-keygen
这里，我们将生成的 key 存放在默认目录下即可。建立的过程中会提示输入 passphrase，这相当于给证书加个密码，也是提高安全性的措施，这样即使证书不小心被人拷走也不怕了。当然如果这个留空的话，后面即可实现 PuTTy 通过证书认证的自动登录。
ssh-keygen 命令会生成两个密钥，首先我们需要将公钥改名留在服务器上：

1
cd ~/.ssh mv id_rsa.pub authorized_keys
然后将私钥 id_rsa 从服务器上复制出来，并删除掉服务器上的 id_rsa 文件。
服务器上的设置就做完了，下面的步骤需要在客户端电脑上来做。首先，我们需要将 id_rsa 文件转化为 PuTTy 支持的格式。这里我们需要利用 PuTTyGEN 这个工具：

点击 PuTTyGen 界面中的 Load 按钮，选择 id_rsa 文件，输入 passphrase（如果有的话），然后再点击 Save PrivateKey 按钮，这样 PuTTy 接受的私钥就做好了。

打开 PuTTy，在 Session 中输入服务器的 IP 地址，在 Connection->SSH->Auth 下点击 Browse 按钮，选择刚才生成好的私钥。然后回到 Connection 选项，在 Auto-login username 中输入证书所属的用户名。回到 Session 选项卡，输入个名字点 Save 保存下这个 Session。点击底部的 Open 应该就可以通过证书认证登录到服务器了。如果有 passphrase 的话，登录过程中会要求输入 passphrase，否则将会直接登录到服务器上，非常的方便。 
以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持脚本之家。
